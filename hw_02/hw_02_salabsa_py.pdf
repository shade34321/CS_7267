%!PS-Adobe-3.0
%%Title: hw_02_salabsa.py
%%For: shade
%%Creator: VIM - Vi IMproved 8.0 (2016 Sep 12)
%%CreationDate: Tue Feb 20 21:50:42 2018
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim80/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim80/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(hw_02_salabsa.py                                                              Page 1)59.5 792.4 ms
F0 sf
0.251 0.251 0 r
(import)59.5 772.4 ms
0 g
( matplotlib.pyplot )s
F1 sf
0 0 0.376 r
(as)s
F0 sf
0 g
( plt)s
0.251 0.251 0 r
(import)59.5 762.4 ms
0 g
( numpy )s
F1 sf
0 0 0.376 r
(as)s
F0 sf
0 g
( np)s
0.251 0.251 0 r
(import)59.5 752.4 ms
0 g
( pandas )s
F1 sf
0 0 0.376 r
(as)s
F0 sf
0 g
( pd)s
(""")59.5 732.4 ms
(Most of this code was taken directly from your code in class.)59.5 722.4 ms
(""")59.5 712.4 ms
F1 sf
0 0 0.376 r
(def)59.5 702.4 ms
F0 sf
0 g
( )s
0.251 0.251 0 r
(solveLinearRegresion)s
0 g
(\(X, y\):)s
(    """)59.5 692.4 ms
(        Finds the optimal B given the data X and Y)59.5 682.4 ms
(    """)59.5 672.4 ms
(    )59.5 662.4 ms
F1 sf
0 0 0.376 r
(return)s
F0 sf
0 g
( np.dot\(np.dot\(np.linalg.pinv\(np.dot\(X.transpose\(\), X\)\), X.transpose\(\)\),y\))s
F1 sf
0 0 0.376 r
(def)59.5 642.4 ms
F0 sf
0 g
( )s
0.251 0.251 0 r
(predict)s
0 g
(\(X, b, threshold\):)s
(    """)59.5 632.4 ms
(        Determines which classification X is using B based on some threshold)59.5 622.4 ms
(    """)59.5 612.4 ms
(    )59.5 602.4 ms
F1 sf
0 0 0.376 r
(return)s
F0 sf
0 g
( np.array\(np.dot\(X, b\) > threshold\))s
F1 sf
0 0 0.376 r
(def)59.5 582.4 ms
F0 sf
0 g
( )s
0.251 0.251 0 r
(accuracy)s
0 g
(\(X, y\):)s
(    """)59.5 572.4 ms
(        Determines how many we guessed correctly)59.5 562.4 ms
(    """)59.5 552.4 ms
(    )59.5 542.4 ms
F1 sf
0 0 0.376 r
(return)s
F0 sf
0 g
( \()s
0.251 0.251 0 r
(sum)s
0 g
(\(X == y\) / )s
0.251 0.251 0 r
(float)s
0 g
(\()s
0.251 0.251 0 r
(len)s
0 g
(\(y\)\)\) * )s
0.376 g
(100)s
F1 sf
0 0 0.376 r
(def)59.5 522.4 ms
F0 sf
0 g
( )s
0.251 0.251 0 r
(min_max_norm)s
0 g
(\(X\):)s
(    """)59.5 512.4 ms
(        Simple min-max norm to normalize the data. Not really sure this is needed bu)59.5 502.4 ms
(t got an extra 2% in my GD accuracy.)59.5 492.4 ms
(    """)59.5 482.4 ms
(    )59.5 472.4 ms
F1 sf
0 0 0.376 r
(return)s
F0 sf
0 g
( X / )s
0.376 g
(255.0)s
F1 sf
0 0 0.376 r
(def)59.5 452.4 ms
F0 sf
0 g
( )s
0.251 0.251 0 r
(cost)s
0 g
(\(X, y, b\):)s
(    """)59.5 442.4 ms
(        Calculates the Ordinary least Squares)59.5 432.4 ms
(    """)59.5 422.4 ms
(    )59.5 412.4 ms
F1 sf
0 0 0.376 r
(return)s
F0 sf
0 g
( np.sum\(\(np.dot\(X,b\) - np.array\(y\)\)**)s
0.376 g
(2)s
0 g
(\))s
F1 sf
0 0 0.376 r
(def)59.5 392.4 ms
F0 sf
0 g
( )s
0.251 0.251 0 r
(GD_LR)s
0 g
(\(X, y, b\):)s
(    """)59.5 382.4 ms
(        Calculates gradient descient linear regression)59.5 372.4 ms
(    """)59.5 362.4 ms
(    )59.5 352.4 ms
F1 sf
0 0 0.376 r
(return)s
F0 sf
0 g
( -np.dot\(X.transpose\(\), y\) + np.dot\(np.dot\(X.transpose\(\), X\), b\))s
0 0.498 0.498 r
(#Reads in the data)59.5 332.4 ms
0 g
(test_data = pd.read_csv\('MNIST_test.csv', skiprows=[)59.5 322.4 ms
0.376 g
(0)s
0 g
(], header=)s
0.251 0.251 0 r
(None)s
0 g
(\))s
(training_data = pd.read_csv\('MNIST_training.csv', skiprows=[)59.5 312.4 ms
0.376 g
(0)s
0 g
(], header=)s
0.251 0.251 0 r
(None)s
0 g
(\))s
0 0.498 0.498 r
(#Pulls out the labels which determines whats true -> you usually call y_test groundt)59.5 292.4 ms
(ruth )59.5 282.4 ms
0 g
(y_training = training_data.iloc[:,)59.5 272.4 ms
0.376 g
(0)s
0 g
(])s
(y_test = test_data.iloc[:,)59.5 262.4 ms
0.376 g
(0)s
0 g
(])s
0 0.498 0.498 r
(# Grabs all the feature data)59.5 242.4 ms
0 g
(X_training = training_data.iloc[:,)59.5 232.4 ms
0.376 g
(1)s
0 g
(:])s
(X_test = test_data.iloc[:,)59.5 222.4 ms
0.376 g
(1)s
0 g
(:])s
0 0.498 0.498 r
(# Solves for b_opt using the training data)59.5 202.4 ms
0 g
(b_opt = solveLinearRegresion\(X_training, y_training\))59.5 192.4 ms
0 0.498 0.498 r
(#Predicts on the testing data)59.5 172.4 ms
0 g
(predictions = predict\(X_test, b_opt, )59.5 162.4 ms
0.376 g
(.5)s
0 g
(\))s
0.251 0.251 0 r
(print)59.5 152.4 ms
0 g
( "b_opt: ")s
0.251 0.251 0 r
(print)59.5 142.4 ms
0 g
( b_opt)s
0.251 0.251 0 r
(print)59.5 122.4 ms
0 g
( "Linear regression accuracy is %f%%" % accuracy\(predictions, y_test\))s
(""")59.5 102.4 ms
(  This figures out the GD using non normalized data. Somebody mentioned in class tha)59.5 92.4 ms
(t in class it was stated GD data always needs to be normalized after I did this. I f)59.5 82.4 ms
(ound it interesting how close the two are.)59.5 72.4 ms
(""")59.5 62.4 ms
0 0.498 0.498 r
(# Pulls out the size of the matrix. We only need the number of columns so we don't b)59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(hw_02_salabsa.py                                                              Page 2)59.5 792.4 ms
F0 sf
0 0.498 0.498 r
(other with the rows.)59.5 772.4 ms
0 g
(_, p = X_training.shape)59.5 762.4 ms
0 0.498 0.498 r
(#Gives us an array of 0's for the coefficient. )59.5 752.4 ms
0 g
(b_est = np.zeros\(p\))59.5 742.4 ms
0 0.498 0.498 r
(# Purposely set the learning rate really low. If you set it higher it overflows. Tis)59.5 732.4 ms
( interesting)59.5 722.4 ms
0 g
(learning_rate = )59.5 712.4 ms
0.376 g
(1e-10)s
0 g
(bs = [b_est])59.5 702.4 ms
(costs = [cost\(X_training, y_training, b_est\)])59.5 692.4 ms
0 0.498 0.498 r
(# finds B-est so we can check the graph and ensure it converges)59.5 682.4 ms
F1 sf
0 0 0.376 r
(for)59.5 672.4 ms
F0 sf
0 g
( i )s
0 0 0.376 r
(in)s
0 g
( )s
0.251 0.251 0 r
(range)s
0 g
(\()s
0.376 g
(0)s
0 g
(, )s
0.376 g
(100)s
0 g
(\):)s
(    b_est = b_est - learning_rate * GD_LR\(X_training, y_training, b_est\))59.5 662.4 ms
(    b_cost = cost\(X_training, y_training, b_est\))59.5 652.4 ms
(    bs.append\(b_est\))59.5 642.4 ms
(    costs.append\(b_cost\))59.5 632.4 ms
(plt.plot\(costs\))59.5 612.4 ms
(plt.show\(\))59.5 602.4 ms
0.251 0.251 0 r
(print)59.5 592.4 ms
0 g
( b_est)s
0 0.498 0.498 r
(# Predict on the test data)59.5 562.4 ms
0 g
(gd_prediction = predict\(X_test, b_est, )59.5 552.4 ms
0.376 g
(0.5)s
0 g
(\))s
0.251 0.251 0 r
(print)59.5 542.4 ms
0 g
( "Non-normalized gradient descent b_est")s
0.251 0.251 0 r
(print)59.5 532.4 ms
0 g
( b_est)s
0 0.498 0.498 r
(#How accurate are we?)59.5 512.4 ms
0.251 0.251 0 r
(print)59.5 502.4 ms
0 g
( "Non-normalized gradient descent accuracy is %f%%" % accuracy\(gd_prediction, y)s
(_test\))59.5 492.4 ms
0 0.498 0.498 r
(# Differences between the two different b from LR and GD)59.5 472.4 ms
0 g
(total_diff = )59.5 462.4 ms
0.251 0.251 0 r
(sum)s
0 g
(\()s
0.251 0.251 0 r
(abs)s
0 g
(\(b_opt-b_est\)\))s
0.251 0.251 0 r
(print)59.5 452.4 ms
0 g
( "Non-normalized differenc")s
0.251 0.251 0 r
(print)59.5 442.4 ms
0 g
( total_diff)s
(""")59.5 422.4 ms
(   The code below is exactly the same as the GD code above. But this time we use nor)59.5 412.4 ms
(malize data. It gave me an extra 2% and I could start with a bigger learning rate.)59.5 402.4 ms
(""")59.5 392.4 ms
(X_training_norm = min_max_norm\(X_training\))59.5 372.4 ms
(X_test_norm = min_max_norm\(X_test\))59.5 362.4 ms
(_, p = X_training_norm.shape)59.5 352.4 ms
(b_est = np.zeros\(p\))59.5 342.4 ms
(learning_rate = )59.5 332.4 ms
0.376 g
(1e-4)s
0 g
(bs = [b_est])59.5 322.4 ms
(costs = [cost\(X_training_norm, y_training, b_est\)])59.5 312.4 ms
F1 sf
0 0 0.376 r
(for)59.5 302.4 ms
F0 sf
0 g
( i )s
0 0 0.376 r
(in)s
0 g
( )s
0.251 0.251 0 r
(range)s
0 g
(\()s
0.376 g
(0)s
0 g
(, )s
0.376 g
(100)s
0 g
(\):)s
(    b_est = b_est - learning_rate * GD_LR\(X_training_norm, y_training, b_est\))59.5 292.4 ms
(    b_cost = cost\(X_training_norm, y_training, b_est\))59.5 282.4 ms
(    bs.append\(b_est\))59.5 272.4 ms
(    costs.append\(b_cost\))59.5 262.4 ms
(gd_prediction = predict\(X_test_norm, b_est, )59.5 242.4 ms
0.376 g
(0.5)s
0 g
(\))s
0.251 0.251 0 r
(print)59.5 232.4 ms
0 g
( "Normalized gradient descent b_est")s
0.251 0.251 0 r
(print)59.5 222.4 ms
0 g
( b_est)s
0.251 0.251 0 r
(print)59.5 202.4 ms
0 g
( "Normalized gradient descent accuracy is %f%%" % accuracy\(gd_prediction, y_tes)s
(t\))59.5 192.4 ms
(total_diff = )59.5 172.4 ms
0.251 0.251 0 r
(sum)s
0 g
(\()s
0.251 0.251 0 r
(abs)s
0 g
(\(b_opt-b_est\)\))s
0.251 0.251 0 r
(print)59.5 162.4 ms
0 g
( "Normalized differenc")s
0.251 0.251 0 r
(print)59.5 152.4 ms
0 g
( total_diff)s
re sp
%%PageTrailer
%%Trailer
%%Pages: 2
%%EOF
